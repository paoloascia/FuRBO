# Full ode for FuRBO
#
# March 2024
##########
# Imports
import math
from matplotlib.patches import Rectangle
import matplotlib.pyplot as plt
import numpy as np
import os
import pickle as pkl
import torch

from rover_function import RoverTrajPlan

##########
# Convergence plot: obj - infeasible + feasible
fig = plt.figure()
ax = plt.gca()

trees = np.array([[0.43143755, 0.20876147],
                  [0.38485367, 0.39183579],
                  [0.02985961, 0.22328303],
                  [0.7803707, 0.3447003],
                  [0.93685657, 0.56297285],
                  [0.04194252, 0.23598362],
                  [0.28049582, 0.40984475],
                  [0.6756053, 0.70939481],
                  [0.01926493, 0.86972335],
                  [0.5993437, 0.63347932],
                  [0.57807619, 0.40180792],
                  [0.56824287, 0.75486851],
                  [0.35403502, 0.38591056],
                  [0.72492026, 0.59969313],
                  [0.27618746, 0.64322757],
                  [0.54029566, 0.25492943],
                  [0.30903526, 0.60166842],
                  [0.2913432, 0.29636879],
                  [0.78512072, 0.62340245],
                  [0.29592116, 0.08400595],
                  [0.87548394, 0.04877622],
                  [0.21714791, 0.9607346],
                  [0.92624074, 0.53441687],
                  [0.53639253, 0.45127928],
                  [0.99892031, 0.79537837],
                  [0.84621631, 0.41891986],
                  [0.39432819, 0.06768617],
                  [0.92365693, 0.72217512],
                  [0.95520914, 0.73956575],
                  [0.820383, 0.53880139],
                  [0.22378049, 0.9971974],
                  [0.34023233, 0.91014706],
                  [0.64960636, 0.35661133],
                  [0.29976464, 0.33578931],
                  [0.43202238, 0.11563227],
                  [0.66764947, 0.52086962],
                  [0.45431078, 0.94582745],
                  [0.12819915, 0.33555344],
                  [0.19287232, 0.8112075],
                  [0.61214791, 0.71940626],
                  [0.4522542, 0.47352186],
                  [0.95623345, 0.74174186],
                  [0.17340293, 0.89136853],
                  [0.04600255, 0.53040724],
                  [0.42493468, 0.41006649],
                  [0.37631485, 0.88033853],
                  [0.66951947, 0.29905739],
                  [0.4151516, 0.77308712],
                  [0.55762991, 0.26400156],
                  [0.6280609, 0.53201974],
                  [0.92727447, 0.61054975],
                  [0.93206587, 0.42107549],
                  [0.63885574, 0.37540613],
                  [0.15303425, 0.57377797],
                  [0.8208471, 0.16566631],
                  [0.14889043, 0.35157346],
                  [0.71724622, 0.57110725],
                  [0.32866327, 0.8929578],
                  [0.74435871, 0.47464421],
                  [0.9252026, 0.21034329],
                  [0.57039306, 0.54356078],
                  [0.56611551, 0.02531317],
                  [0.84830056, 0.01180542],
                  [0.51282028, 0.73916524],
                  [0.58795481, 0.46527371],
                  [0.83259048, 0.98598188],
                  [0.00242488, 0.83734691],
                  [0.72505789, 0.04846931],
                  [0.07312971, 0.30147979],
                  [0.55250344, 0.23891255],
                  [0.51161315, 0.46466442],
                  [0.802125, 0.93440495],
                  [0.9157825, 0.32441602],
                  [0.44927665, 0.53380074],
                  [0.67708372, 0.67527231],
                  [0.81868924, 0.88356194],
                  [0.48228814, 0.88668497],
                  [0.39805433, 0.99341196],
                  [0.86671752, 0.79016975],
                  [0.01115417, 0.6924913],
                  [0.34272199, 0.89543756],
                  [0.40721675, 0.86164495],
                  [0.26317679, 0.37334193],
                  [0.74446787, 0.84782643],
                  [0.55560143, 0.46405104],
                  [0.73567977, 0.12776233],
                  [0.28080322, 0.26036748],
                  [0.17507419, 0.95540673],
                  [0.54233783, 0.1196808],
                  [0.76670967, 0.88396285],
                  [0.61297539, 0.79057776],
                  [0.9344029, 0.86252764],
                  [0.48746839, 0.74942784],
                  [0.18657635, 0.58127321],
                  [0.10377802, 0.71463978],
                  [0.7771771, 0.01463505],
                  [0.7635042, 0.45498358],
                  [0.83345861, 0.34749363],
                  [0.38273809, 0.51890558],
                  [0.33887574, 0.82842507],
                  [0.02073685, 0.41776737],
                  [0.68754547, 0.96430979],
                  [0.4704215, 0.92717361],
                  [0.72666234, 0.63241306],
                  [0.48494401, 0.72003268],
                  [0.52601215, 0.81641253],
                  [0.71426732, 0.47077212],
                  [0.00258906, 0.30377501],
                  [0.35495269, 0.98585155],
                  [0.65507544, 0.03458909],
                  [0.10550588, 0.62032937],
                  [0.60259145, 0.87110846],
                  [0.04959159, 0.535785]])

stones = np.array([[0.5, 0.5],
                   [0.2, 0.75],
                   [0.4, 0.85],
                   [0.85, 0.4],
                   [0.75, 0.2],
                   [0.1, 0.3],
                   [0.25, 0.55],
                   [0.45, 0.65],
                   [0.6, 0.7],
                   [0.75, 0.9],
                   [0.3, 0.1],
                   [0.55, 0.25],
                   [0.65, 0.45],
                   [0.8, 0.6],
                   [0.9, 0.75]])

stones = np.array([[0.92, 0.56],
                   [0.15, 0.31],
                   [0.15, 0.85],
                   [0.17, 0.55],
                   [0.44, 0.76],
                   [0.75, 0.39],
                   [0.52, 0.18],
                   [0.41, 0.44],
                   [0.88, 0.78],
                   [0.89, 0.27],
                   [0.67, 0.71],
                   [0.32, 0.19],
                   [0.70, 0.91],
                   [0.62, 0.50],
                   [0.85, 0.15]])


for t in trees:
    rect = Rectangle(t - 0.025, 0.05, 0.05, linewidth=1, edgecolor='y', facecolor='y')
    ax.add_patch(rect)
    
for s in stones:
    rect = Rectangle(s - 0.05, 0.1, 0.1, linewidth=1, edgecolor='r', facecolor='r')
    ax.add_patch(rect)
    
x = np.array([0.7230, 0.4611, 0.7562, 0.4829, 0.2339, 0.2660, 0.4654, 0.1363, 0.0076,
         0.2358, 0.5104, 0.9039, 0.3044, 0.1782, 0.7651, 0.9204, 0.8241, 0.2744,
         0.0649, 0.3160, 0.9947, 0.7582, 0.7036, 0.6821, 0.5287, 0.8019, 0.2207,
         0.8871, 0.5266, 0.1869, 0.5493, 0.6614, 0.8043, 0.1934, 0.7614, 0.4789,
         0.6150, 0.9914, 0.3029, 0.6547, 0.1089, 0.1012, 0.5312, 0.5071, 0.6832,
         0.3581, 0.6002, 0.9149, 0.7089, 0.7257, 0.1853, 0.3585, 0.7351, 0.6870,
         0.9170, 0.2156, 0.0564, 0.3129, 0.5109, 0.8115])

rover = RoverTrajPlan(dim=60)
rover(x)
points = rover.domain.traj.get_points(np.linspace(0, 1.0, 1000, endpoint=True))
ax.plot(points[:,0], points[:,1], color = 'b')
